{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\euHabit\\\\src\\\\Timer.js\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst minuteSeconds = 60;\nconst hourSeconds = 3600;\nconst daySeconds = 86400;\nconst minCounted = 0.1;\nconst timerProps = {\n  isPlaying: true,\n  size: 120,\n  strokeWidth: 6\n};\nvar msg = new SpeechSynthesisUtterance('Session completed. Lets stretch');\nmsg.voice = window.speechSynthesis.getVoices()[2];\nmsg.rate = 0.85;\n\nconst renderTime = (dimension, time) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"time-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time\",\n      children: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: dimension\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\nconst getTimeSeconds = time => minuteSeconds - time | 0;\n\nconst getTimeMinutes = time => time % hourSeconds / minuteSeconds | 0;\n\nexport function Timer() {\n  const stratTime = Date.now() / 1000; // use UNIX timestamp in seconds\n\n  const endTime = stratTime + minCounted * 60; // use UNIX timestamp in seconds\n\n  const remainingTime = endTime - stratTime;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(CountdownCircleTimer, { ...timerProps,\n      colors: [[\"#7E2E84\"]],\n      duration: hourSeconds,\n      initialRemainingTime: remainingTime % hourSeconds,\n      onComplete: totalElapsedTime => [remainingTime - totalElapsedTime > minuteSeconds],\n      children: ({\n        elapsedTime\n      }) => renderTime(\"minutes\", getTimeMinutes(hourSeconds - elapsedTime))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(CountdownCircleTimer, { ...timerProps,\n      colors: [[\"#D14081\"]],\n      duration: minuteSeconds,\n      initialRemainingTime: remainingTime % minuteSeconds,\n      onComplete: () => {\n        speechSynthesis.speak(msg);\n        alert(\"Session done\");\n      },\n      children: ({\n        elapsedTime\n      }) => renderTime(\"seconds\", getTimeSeconds(elapsedTime))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_c = Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/euHabit/src/Timer.js"],"names":["CountdownCircleTimer","minuteSeconds","hourSeconds","daySeconds","minCounted","timerProps","isPlaying","size","strokeWidth","msg","SpeechSynthesisUtterance","voice","window","speechSynthesis","getVoices","rate","renderTime","dimension","time","getTimeSeconds","getTimeMinutes","Timer","stratTime","Date","now","endTime","remainingTime","totalElapsedTime","elapsedTime","speak","alert"],"mappings":";AAAA,SAASA,oBAAT,QAAqC,8BAArC;;AAEA,MAAMC,aAAa,GAAG,EAAtB;AACA,MAAMC,WAAW,GAAG,IAApB;AACA,MAAMC,UAAU,GAAG,KAAnB;AACA,MAAMC,UAAU,GAAG,GAAnB;AAEA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,SAAS,EAAE,IADM;AAEjBC,EAAAA,IAAI,EAAE,GAFW;AAGjBC,EAAAA,WAAW,EAAE;AAHI,CAAnB;AAMA,IAAIC,GAAG,GAAG,IAAIC,wBAAJ,CAA6B,iCAA7B,CAAV;AACED,GAAG,CAACE,KAAJ,GAAYC,MAAM,CAACC,eAAP,CAAuBC,SAAvB,GAAmC,CAAnC,CAAZ;AACAL,GAAG,CAACM,IAAJ,GAAW,IAAX;;AAEF,MAAMC,UAAU,GAAG,CAACC,SAAD,EAAYC,IAAZ,KAAqB;AACtC,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,gBAAuBA;AAAvB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAMD;AAAN;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAPD;;AASA,MAAME,cAAc,GAAID,IAAD,IAAWjB,aAAa,GAAGiB,IAAjB,GAAyB,CAA1D;;AACA,MAAME,cAAc,GAAIF,IAAD,IAAYA,IAAI,GAAGhB,WAAR,GAAuBD,aAAxB,GAAyC,CAA1E;;AAEA,OAAO,SAASoB,KAAT,GAAkB;AAErB,QAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,KAAa,IAA/B,CAFqB,CAEgB;;AACrC,QAAMC,OAAO,GAAGH,SAAS,GAAGlB,UAAU,GAAC,EAAvC,CAHqB,CAGsB;;AAC3C,QAAMsB,aAAa,GAAGD,OAAO,GAAGH,SAAhC;AAEA,sBACA;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,4BACA,QAAC,oBAAD,OACQjB,UADR;AAEI,MAAA,MAAM,EAAE,CAAC,CAAC,SAAD,CAAD,CAFZ;AAGI,MAAA,QAAQ,EAAEH,WAHd;AAII,MAAA,oBAAoB,EAAEwB,aAAa,GAAGxB,WAJ1C;AAKI,MAAA,UAAU,EAAGyB,gBAAD,IAAsB,CAChCD,aAAa,GAAGC,gBAAhB,GAAmC1B,aADH,CALtC;AAAA,gBASK,CAAC;AAAE2B,QAAAA;AAAF,OAAD,KACCZ,UAAU,CAAC,SAAD,EAAYI,cAAc,CAAClB,WAAW,GAAG0B,WAAf,CAA1B;AAVhB;AAAA;AAAA;AAAA;AAAA,YADA,eAeE,QAAC,oBAAD,OACMvB,UADN;AAEE,MAAA,MAAM,EAAE,CAAC,CAAC,SAAD,CAAD,CAFV;AAGE,MAAA,QAAQ,EAAEJ,aAHZ;AAIE,MAAA,oBAAoB,EAAEyB,aAAa,GAAGzB,aAJxC;AAKE,MAAA,UAAU,EAAE,MAAK;AACjBY,QAAAA,eAAe,CAACgB,KAAhB,CAAsBpB,GAAtB;AAA4BqB,QAAAA,KAAK,CAAC,cAAD,CAAL;AAAsB,OANpD;AAAA,gBASG,CAAC;AAAEF,QAAAA;AAAF,OAAD,KACCZ,UAAU,CAAC,SAAD,EAAYG,cAAc,CAACS,WAAD,CAA1B;AAVd;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AA+BH;KArCeP,K","sourcesContent":["import { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\n\r\nconst minuteSeconds = 60;\r\nconst hourSeconds = 3600;\r\nconst daySeconds = 86400;\r\nconst minCounted = 0.1;\r\n\r\nconst timerProps = {\r\n  isPlaying: true,\r\n  size: 120,\r\n  strokeWidth: 6\r\n};\r\n\r\nvar msg = new SpeechSynthesisUtterance('Session completed. Lets stretch')\r\n  msg.voice = window.speechSynthesis.getVoices()[2]\r\n  msg.rate = 0.85; \r\n\r\nconst renderTime = (dimension, time) => {\r\n  return (\r\n    <div className=\"time-wrapper\">\r\n      <div className=\"time\">{time}</div>\r\n      <div>{dimension}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getTimeSeconds = (time) => (minuteSeconds - time) | 0;\r\nconst getTimeMinutes = (time) => ((time % hourSeconds) / minuteSeconds) | 0;\r\n\r\nexport function Timer()  {\r\n    \r\n    const stratTime = Date.now() / 1000; // use UNIX timestamp in seconds\r\n    const endTime = stratTime + minCounted*60; // use UNIX timestamp in seconds\r\n    const remainingTime = endTime - stratTime;\r\n    \r\n    return (\r\n    <div className=\"login-wrapper\">\r\n    <CountdownCircleTimer\r\n        {...timerProps}\r\n        colors={[[\"#7E2E84\"]]}\r\n        duration={hourSeconds}\r\n        initialRemainingTime={remainingTime % hourSeconds}\r\n        onComplete={(totalElapsedTime) => [\r\n          remainingTime - totalElapsedTime > minuteSeconds\r\n        ]}\r\n      >\r\n        {({ elapsedTime }) =>\r\n          renderTime(\"minutes\", getTimeMinutes(hourSeconds - elapsedTime))\r\n        }\r\n      </CountdownCircleTimer>\r\n\r\n      <CountdownCircleTimer\r\n        {...timerProps}\r\n        colors={[[\"#D14081\"]]}\r\n        duration={minuteSeconds}\r\n        initialRemainingTime={remainingTime % minuteSeconds}\r\n        onComplete={()=> {\r\n        speechSynthesis.speak(msg); alert(\"Session done\")}\r\n         }\r\n      >\r\n        {({ elapsedTime }) =>\r\n          renderTime(\"seconds\", getTimeSeconds(elapsedTime))\r\n        }\r\n      </CountdownCircleTimer>\r\n    </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}